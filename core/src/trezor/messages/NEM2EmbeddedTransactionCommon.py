# Automatically generated by pb2py
# fmt: off
import protobuf as p

if __debug__:
    try:
        from typing import Dict, List, Optional  # noqa: F401
        from typing_extensions import Literal  # noqa: F401
        EnumTypeNEM2EntityType = Literal[0, 16705, 16708, 16712, 16716, 16717, 16718, 16720, 16721, 16722, 16724, 16725, 16961, 16964, 16973, 16974, 16976, 16977, 16978, 17220, 17230, 17232]
        EnumTypeNEM2NetworkType = Literal[96, 104, 144, 152]
    except ImportError:
        pass


class NEM2EmbeddedTransactionCommon(p.MessageType):

    def __init__(
        self,
        *,
        type: Optional[EnumTypeNEM2EntityType] = None,
        network_type: Optional[EnumTypeNEM2NetworkType] = None,
        version: int = 1,
        public_key: Optional[str] = None,
    ) -> None:
        self.type = type
        self.network_type = network_type
        self.version = version
        self.public_key = public_key

    @classmethod
    def get_fields(cls) -> Dict:
        return {
            1: ('type', p.EnumType("NEM2EntityType", (0, 16724, 16717, 16973, 16718, 16974, 16961, 16705, 17220, 16964, 16708, 17230, 16712, 16722, 16978, 16725, 16720, 16976, 17232, 16716, 16721, 16977)), None),
            2: ('network_type', p.EnumType("NEM2NetworkType", (104, 152, 96, 144)), None),
            3: ('version', p.UVarintType, 1),  # default=1
            4: ('public_key', p.UnicodeType, None),
        }
